{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <div class="two-col-layout">
        <article class="article">
            <header>
                <h1>Redovisning av kursmoment i kursen</h1>
            </header>

            <section>
                <h2 id="kmom01">Kmom01</h2>
                <p>
                    Mina tidigare erfarenheter kring objektorientering kommer främst från objektorienterad spelprogrammering där jag koda i C# och lite kommer också från pythonkursen som avslutade nyss. 
                    Där jobbade jag med klasser, inkapsling, arv och polymorfism. Jag lärde mig hur man skapade klasser och vad det innehåller. 
                    Det finns en speciell metod som kallas konstruktor där man insisterar nya objekt när det skapas. 
                    Lärde mig också om abstrakta klasser och hur man kan ärva från andra klasser dock var det lite skillnad mellan C# och python. 
                    I C# kan man bara ärva från en basklass medan i python kan man ärva från flera. 
                    C# är mer organiserad och har konsekvent syntaxer medan python är dynamisk typning och variabelns datatyp tilldelas när programmet körs.
                </p>
                    
                <p>
                    En klass är en mall för att skapa objekt och ett objekt är en instans av en klass. Man definierar en klass med hjälp av nyckelordet class. 
                    En klass har attribut och metoder och dessa attribut och metoder kan vi definiera med hjälp av variabler för att hålla värden t.ex namn, ålder, kön etc.
                    Ett objekt skapas utifrån en klass. När man skapar ett objekt ärver den alla attributen och metoder från klassen, men varje objekt har olika värden.
                </p>

                <p>
                    Jag bygger min webbapplikation i Symfony för PHP som renderas med templatemotorn Twig. 
                    Basen av webbsidan är under mappen templates och med hjälp av twig blir det lättare att skapa html och länka sidor. 
                    Jag skapade mina sidor och routes med hjälp av controllers som ligger under src/Controller. 
                    Koden är inte svår att förstå men det finns många mappar och filer som man behöver hålla koll på.
                </p>

                <p>
                    Jag läste inte igenom hela artikeln noggrann utan skummade igenom det. Något som jag tyckte var intressant var om templates. 
                    Templates ska bara ha ansvar för att visa formaterat innehåll. 
                    Den största fördelen med att använda templates är för att skapa en separation mellan presentationslogiken och resten av applikationen.
                </p>
                
                <p>
                    Mitt TIL för detta kursmomentet är hur man bygger en webbapplikation i Symfony.
                </p>
            </section>

            <section>
                <h2 id="kmom02">Kmom02</h2>
                <p>
                    Arv: En klass kan ärva egenskaper från en annan klass och klassen som man ärver ifrån kallas förälder och den som ärver kallas för barn. Barnet kan komma åt alla metoder och egenskaper som föräldern har. En klass kan bara ärva från en annan klass och inte flera.
                    Komposition: En klass använder sig av andra klasser, dessa två objekt har en väldigt hård koppling till varandra. 
                    Interface: Interface låter en skapa metod som en klass måste implementera utan att behöva definiera dessa metoder. Alla metoder i interfacet måste vara publika.
                    Trait: Det är en koddel som kan återanvändas i andra klasser som redan ärver från en annan klass. Trait ligger utanför klasser och det skapas på samma sätt man skapar en klass, bara att man skriver trait istället för class.
                </p>

                <p>
                    Jag började först med att skapa sessions i pig game som jag sedan kopierade till kortspelet. 
                    Det gjorde jag för att pig game redan hade innehåll och då kunde jag se att mina funktioner fungerar. 
                    Sedan skapade jag CardController för alla routes. 
                    Därefter implementerade jag alla klasser som jag behövde i uppgiften vilket var Card, CardGraphic och DeckOfCards som ligger i src/Card mappen. 
                    Jag kollade på pig game för att se om det fanns metoder jag kunde återanvända och skriva om så det skulle passa kortspelet. 
                    Jag är inte riktigt nöjd med min kod. I CardController har jag lite upprepande kod vilket jag har kunnat ändra genom att skriva fler metoder i DeckOfCards klassen men 
                    jag tycker att jag har ägnat för mycket tid i detta kursmoment därfr valde jag att inte skriva om min kod.
                </p>

                <p>
                    Det har varit roligt att jobba med Symfony och MVC än så länge. Det har varit intressant att jobba med controllers och templates. 
                    Även om jag har jobbat med Twig och php förut så kände jag mig inte riktigt säker i det. 
                    Jag tycker om objektorienterat programmering och jag har jobbat med i python och C# men i php tycker jag att det är lite svårare att sitta i huvudet. 
                    Det är annorlunda hur man deklarera variabler och kalla på metoder från klasser så jag behöver träna mer på att koda i php för att skriva smidigare.
                </p>

                <p>
                    I detta kursmomentet har jag lärt mig vad Trait är, hur och varför man använder det.
                </p>
            </section>

            <section>
                <h2 id="kmom03">Kmom03</h2>
                <p>
                </p>
            </section>

            <section>
                <h2 id="kmom04">Kmom04</h2>
                <p>
                </p>
            </section>

            <section>
                <h2 id="kmom05">Kmom05</h2>
                <p>
                </p>
            </section>

            <section>
                <h2 id="kmom06">Kmom06</h2>
                <p>
                </p>
            </section>

            <section>
                <h2 id="kmom10">Kmom10</h2>
                <p>
                </p>
            </section>
        </article>

        <aside class="aside aside-left">
            <h4 style="width: 200px">Innehåll<h4>

            <li><a href="#kmom01">Kmom01</a></li>
            <li><a href="#kmom02">Kmom02</a></li>
            <li><a href="#kmom03">Kmom03</a></li>
            <li><a href="#kmom04">Kmom04</a></li>
            <li><a href="#kmom05">Kmom05</a></li>
            <li><a href="#kmom06">Kmom06</a></li>
            <li><a href="#kmom10">Kmom10</a></li>
        </aside>
    </div>
{% endblock %}
